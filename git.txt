#Working with local git repositories
mkdir projectname #Create a directory for project
git init  # To create or initialise a git repository
ls -a # To display files including hidden files

#The repository that we have on our computer is referred to as the local repository.
#The repository that resides in GitHub, GitLab and Bitbucket services in the cloud is referred to as the remote repository.
#There are three different spaces inside Git — the working directory, staging area, and commit history.
 #The working directory is basically represented by the contents of our project folder. It is sort of like a work bench, where we can add, edit, and delete files in our project.
 #The staging area is sort of like a rough draft space. It is where we can add updated versions of files or remove files in order to choose what we want to include in our next commit. In the .git folder the staging area is represented by a file called index.
 #And finally the commit history is basically where our commits live after they’ve been made.In the .git folder the commit history is represented by a folder called objects.

#Add files to the staging area
git add filename 
git status
#Make commit
git commit -m "This is the first commit" # -m is for message
#Configure the user email and user name 
git config user.email "ikrormi08@gmail.com"
git config user.name "ikrormi20" #Password Rungsung23
#To list all the commits we have in our project in reverse chronological order
git log
#The commit has a 40 character commit hash. A commit hash is 40 letters and numbers that act as a name for the commit or a way to refer to it

#A branch in Git
A branch is a pointer to a commit. The default branch in Git is called master or main.
git branch #To see a list of all branches

#Working with an existing project
git status #It will warn the changes in the files
git add . #Adding the changes to the existing git repository 
#In our example to add all the modified version of amr.py and config-amr.json (assuming these two files are modified)
git reset HEAD -- amr.py #Removing files from the staging area or unstaging the files (In case of not wanting to commit the changes in amr.py)
git commit -m "In this version the config-amr.json is updated"

################################################################################################################################

###############Branch
What is a branch
Making a commit on a branch
Making a second branch
Switching branches
Exercise: Working with a local repository and branches

###################Merging
Merging a branch
Introducing vi/vim
Doing a three-way merge
Merging with conflicts
Exercise: Merging

#################Working with remote repositories
Introducing remote repositories
Connecting to Github using SSH
Pushing to a remote repository
Updating a remote repository

##########################Working with Others
Fetching changes
Working at the same time as others
Rebasing Part 1
Rebasing Part 2
Exercise: Remote repositories and working with others
#####################################################################################################################################################
######################### Git Branches: List, Create, Switch to, Merge, Push, & Delete #######################
Git lets you branch out from the original code base. This lets you more easily work with other developers, and gives you a lot of flexibility in your workflow.
#See which branch you're on
git status

####List all branches
git branch #to see local branches
git branch -r #to see remote branches
git branch -a #to see all local and remote branches
####To create a new branch
git branch mynew-branch 
####To switch to mynew-branch in local repo
git checkout mynew-branch 
####To switch to mynew-branch in remote repo
git checkout --track origin/mynew-branch
###To get a list of all branches from the remote
git pull
####Push to a branch
###If your local branch does not exist on the remote, run either of these commands
git push -u origin mynew-branch
git push -u origin HEAD  # HEAD is a reference to the top of the current branch. So it's an easy way to push to a branch of the same name
git push #If your local branch already exists on the remote, run this command

#####Merge a branch
###Check out the branch that you want to merge another branch into (changes will be merged into this branch). If you're not already on the desired branch, run this command:
git checkout master
###Now merge another branch into the current branch
git merge mynew-branch 

###Delete Branches 
git push origin --delete mynew-branch #To delete a remote branch
git branch -d mynew-branch # -d deletes branch only if it has already been merged
git branch -D mynew-branch # -D force deletes branch irrespective of its merged status





